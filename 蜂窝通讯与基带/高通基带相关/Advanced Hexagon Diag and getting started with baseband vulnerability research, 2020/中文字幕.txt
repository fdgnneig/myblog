[音乐]

[鼓掌]

我们的下一位演讲者

alisa isage 是一名独立

漏洞研究员，在安全研究方面取得了

显着的

成就，

例如 2018 年 Sierra Day Initiative 银牌

赏金猎人奖。elisa

将介绍她



关于高通直接协议的最新研究 在



基于高通六角形的

蜂窝

调制解调器中大量存在 alisa 我们期待

您的演讲 现在

这是 alice sh 您正在参加我的

演讲

在 2020 年奶牛通信大会上的优势丰富

远程体验

作为高级漏洞研究员，我的主要兴趣



是复杂系统 在

过去的 10 年里，我一直在

研究

各种类型的软件，例如

Windows 内核浏览器、JavaScript

引擎，

在过去的三年里，我

主要关注超资源

项目，我

今天介绍的项目

有点小 他们

几年前为破坏而做的副项目，

这个演讲的名称高级六角形

诊断有点轻描淡写，

试图让这个演讲



在一般互联网上保持低调，

因为演讲的很大一部分将

实际上致力于



基带中的一般漏洞研究，

但本次演讲的主要焦点是

六边形诊断，

也称为 qcdm 高通诊断

管理器，

这是高通开发的专有协议，

用于其基带，

并且包含在所有 snapdragon 中



由高通公司生产的袜子和调制解调器芯片

现代高通芯片在

具有

名为 qdsp6 hexagon 的自定义指令集架构的定制芯片上运行，



这很重要，因为



我们将处理的所有饮食处理程序都像我的演讲一样

在这个

指令集架构中编写

我针对不同的观众调整了

本次演示的材料，





特别是演示的第一部分



主要是

针对研究主管和高级

技术人员，

最后一部分是更深入的技术，

而且会很有趣 对于与









此特定领域相关的专业漏洞研究人员和低级程序员，

让我们从

蜂窝技术的顶层概述开始，此思维导图

提供了



我们

必须处理的

基带方面的各种类型实体的简化视图 当然不是一个完整的图表，

但

它只呈现了

存在于该

游戏空间中的实体类别，该

思维导图也特定于干净端

设备（

用户设备），并且它完全

忽略了





存在于其自身中的任何服务器端考虑因素 从用户的角度来看，

地球上有相当多的蜂窝协议，

这很简单，

这通常是

您在移动屏幕上看到的衬衫名称 3g 4g，



但实际上，

世代名称编码的这个简单名称

可能会在那里编码几种不同的

不同技术 在







开始

接触这个领域之前，有几个关于太阳能协议的关键点需要理解，第一个是

再生的概念，这

很简单，这只是 g 到 g

等等一系列协议的通用名称， 在



特定一代上受支持 一代

只是一个营销名称，

它是针对用户的 它实际上没有

任何

严格的技术含义，一代

代表了

蜂窝协议的及时演变

关于蜂窝协议的第二个最重要的事情

是空中接口，

这是或 呃，该协议

实际上

是最低级别的协议，它

定义了

蜂窝信号信号如何准确地数字化

和从电磁波中读取，

以及该领域的不同参与者如何准确地



划分空间，历史上

存在

这种低级别协议的两种主要实现 tdma和cdma

现在意味着时分多址，



基本上将无线电频段

内的整个电磁频谱划分



为时隙，这些时隙



由各种移动电话以循环方式轮换，

以便它们

轮流说话，tdma

是 jsm技术和

gsm是这个星球上很长一段时间使用的主要协议，



另一个低级

实现是cdma，

它从一开始就有点复杂，



它被解码为共分多

址

，而不是将这张图片除以

in 时隙和突发划分协议



cdma 使用分配

给

移动电话的焊接随机代码，以便

该代码可以用作

针对调制协议的附加随机化掩码，



并且多个用户设备可以在

同一频率上通话而不会互相干扰



这里是 cdma 是

由高通开发的，主要在美国使用，



因此在 2g 级别有两个

主要协议 GSM

基于 tdma 和 cdma1 基于

sdma

第三代移动协议

这两个发展分支 继续，



因此 gsm 演变成 umts，而 cdma

演变成 cma 2000。这里重要的

一点是，umts

此时已经

采用了 cdma 的低级空中接口

协议，

并最终在第四代

协议中

这两个分支 开发

共同创造了LTE技术，

对于5G来说也是如此，

这对我们来说有点重要，因为从

进攻的角度来看，

因为首先所有这些

技术，包括空中

接口，代表了

单独的

代码位，在底层固件中具有单独的解析算法，



并且 所有这些通常都出现在

每个地下室，无论

您实际使用哪一个，

您的移动提供商实际上是否

支持



从办公室进攻性安全

角度来看的另一件重要且不明显的事情

是，由于这种嗯进化

发展，这些协议实际上并不



完全不同，所以如果你考虑

一下LTE，

它并不是与GSM完全不同的

协议，而是它

很大程度上基于相同的

内部结构，事实上，如果你

看一下

规范，其中一些

几乎与

GSM的规范直接相关

g 其中一些在某种程度上仍然与 LTE 直接

相关，





当您开始从进攻性角度分析协议时，这一点也很重要。



蜂窝协议以层中

嵌套的方式构建。

层

是规范采用的官方术语，



但除外 零级这里我

只是为了方便而编辑它，

但它位于规范层中，



从进攻的角度来看，从一开始到三级，最

有趣的是三级，

正如您从规范的屏幕截图中看到的那样，



因为它编码了大部分

高级协议 例如

处理 sms 和 gsm 等数据，这是

协议的一部分，实际上包含

处理 tlb 值等有趣的数据结构



[鼓掌]

当人们谈论攻击

基带时，他们通常指的是通过无线方式

攻击地下室，

OTA 攻击者是 绝对是

最有趣的之一，但让我们

退后一步，

考虑

地下室生态系统的整个大局，该图

呈现了具有







攻击面的现代地下室通用架构的统一视图

首先，有两个独立的

远程处理器，即

ap 应用程序处理器 和 mp

移动处理器，它可能在

dsp

或另一个 cpu 中，通常有两个

独立的处理器

，每个处理器都运行一个单独的

操作系统，

如果 ap 可能是 android 或

ios，

基带处理器将运行

某种类型 移动供应商提供的实时操作系统的





重要一点是，在现代

实现中，

地下室通常受到

某种安全执行环境的保护，

可能信任安卓或苹果设备上的表面，





这意味着此处描述的特权边界



左侧是双面的，因此

即使您具有对 Android 日志的内核访问权限，



您仍然不应该能够

读取

基带的内存或

至少在模型生产智能手机上以某种方式与此操作相交，



并且同样的情况 到地下室，

它不应该能够



直接访问应用程序处理器，因此这

两个

是彼此分离的相互不信任的实体，



因此存在

一个特权边界，它

代表



呃实时操作中的攻击面

系统中有三个

大的攻击面，从右

到左，最

右边的灰色框

代表蜂窝堆栈的攻击面，



呃，这是实际

解析蜂窝协议的代码，

它通常在几个远程实时操作系统任务中运行，



这个

攻击面的一部分处理协议的所有层，





这里发生大量的解析，

第二个框代表各种

管理协议，

最简单的考虑是通用

协议，

它仍然广泛包含在所有

基带中，

并且它是 甚至通常以某种

方式暴露给

应用程序处理器，因此您

实际上可以向蜂窝女士发送大约 80 个命令，

更

有趣的是

供应商特定的管理协议，其中之一



是直接协议，因为

地下室

现代地下室非常复杂，所以

供应商需要

某种专门的协议来

启用 oms 的配置和诊断（



在高通的情况下），例如 diag

只是

涉及的众多诊断协议之一，

第三个框是我所说的 rto

分数，

它是各种核心级功能，

例如 实现

应用程序处理器接口的代码

[掌声]

在应用程序操作系统（



例如 android）方面，还有两个可



从地下室进行攻击的攻击面，

第一个

是外围设备驱动程序，

因为地下室是一个单独的硬件

外围设备，因此 它需要一些

专门的驱动程序来

处理 i o 等事情，

第二个是拇指鸭冲浪

由

各种接口处理程序表示，因为

地下室和

主操作系统无法

直接通信，

它们使用某种专门的

接口来做到这一点，

以防万一 高通这是共享

内存，因此这种

共享内存实现

通常非常复杂，

它们代表了 antac 和

双方的攻击面

，最后该图的第三部分

位于

我所描述的最下面部分，以创建与以下

相关的框 受信任的

执行环境，

因为通常 Madame 调制解调器

在安全环境中作为 um 中的 Draftlet 运行，



因此从技术上讲，

桁架区域内存在的或与其相关的攻击面



也可用于地下室

攻击研究，

在这里我们可以区分至少两个

大型攻击 第一个是



安全管理器呃调用处理程序，

它是

处理从应用程序处理器到

绘图区域的调用的核心接口，

第二个是 trustlet，



由桁架执行和保护的独立代码片段。



这张图我还添加了一些



关于数据编解码器的信息，我不确定它们是否

应该在 rs 核心中，

因为这些东西可以直接

从单元

或堆栈访问，通常特别是 asn 1

，我已经看到了一些可以

从



这张图上的无线接口我已经展示了一些

漏洞的例子，我

不会在这里详细讨论它们，

因为这不是演示的重点，



但至少来自浮桥的漏洞

你可以找到

文章 在互联网上

[掌声]

讨论基带攻击工具和

方法，我已将上

图缩小到只有一个攻击

面，即

非空中攻击面，这是



通过

解析

地下室运行中的各种蜂窝协议的实现来表示的攻击面



这是我们

可以从

空中接口到达的攻击面，为了实现这一目标，



我们需要一个

收发器，例如软件定义的

无线电或移动测试仪，

它能够与

我们计划攻击的特定蜂窝协议进行通信。



实现这一点的最简单方法是

使用某种软件定义的

无线电，例如地址研究 SRP 或

Blade RF，

并安装基站的开源实现，

例如 Open BTS

或 Open BSC。这里需要注意的

是，基于软件的无线电

实现

实际上落后于技术的发展，



GSM 基站的实现

已经非常

完善和流行，例如

开放式 bts，

事实上，当我尝试

与我的用户 b 建立 bts 时，

对于 umds 来说非常简单，而且存在的

数量较少 基于软件的

实现，

而且对硬件也有更多的限制，

例如，由于资源限制，我的

篡夺模型不

支持 umts，

这里最有趣的是，

不存在任何

基于软件的 cdma 实现。



用来建立一个基站，



这是呃，所以其中

一艘金鱼龙飞船的随机呃图

存在大量各种不同

型号的金鱼草，

当

我在寻找高通用来寻找某种

可视化图表时，我随机选择了这个模型 之前在他们的营销材料中包含了

一些架构的高级图表，



但

似乎他们不再这样做了，

这个特定的图表来自

特定型号 820 的技术规范，



而且这个特定的 Snapdragon 模型



有点有趣，因为它 是

第一个包含

人工智能代理的，它

也是基于六角形的，

对于我们的目的来说，这里主要感兴趣的

是处理器

[鼓掌]

大多数金鱼草都包含相当

长的处理器列表，

至少有四个基于ARM的cryo

cpu实际上

运行arm android

应用程序操作系统，

然后是adreno gpus，然后



在最新的型号上有几个六边形，不仅有

一个六边形

处理单元，而且有几个，

它们分别

根据各自的目的进行调用。

每个六边形课程都

负责处理特定

功能，例如 mdsp 处理

调制解调器

并运行其实时操作系统，



adsp 处理媒体，cdsp

处理计算

[掌声]，

因此六边形实际上代表了

大约一半的处理能力

在现代金鱼草上，

嗯，从硬件角度来看，六边形架构有两个关键

点，



首先，

六边形专门用于并行

处理

，因此第一个概念

是可变大小的指令包，

这意味着多条指令

可以

同时执行 在单独的

执行单元中

[掌声]

它还使用硬件多线程

来实现相同的

目的，在幻灯片的右侧，这

是六边形组件的一些示例，



有时非常有趣，呃

这些大括号代表



同时执行的指令

这些指令必须

兼容，以便能够

使用

不同的处理槽

，然后有一个有趣的新符号，

它实际上使指令

能够在同一指令周期内使用特定寄存器的旧值和新值





这提供了相当多的

低级别优化，

以获取更多信息，我可以引导您访问



六边形规范程序员

参考手册，可以从

高通网站获得

[鼓掌]

[音乐]





正如我所说，生产熔断的概念很常见 以前，

移动设备供应商的常见做法是在

设备进入市场之前锁定设备，



以防止修改和修补，

为了实现

锁定，

他们通常有多种方法来

实现，

通常是各种高级诊断和

调试功能

从软件或

硬件或两者中删除，

很常见的是，这些

功能仅从软件中删除，



而硬件保留在这里，在

这种

情况下，我们

最终将研究人员提出



他们自己的基于软件的实现

所有这些功能，如

一些自定义

ios 内核调试器的情况，例如，

在高通的情况下，在某个

时候有一份泄露的

内部备忘录，其中讨论了

他们在

生产融合设备方面到底做了什么，

以及现代 Android 的生产融合，



地下室在桁架内运行 区域

，在我的实现中，它已经被

完全锁定，

它使用一个单独的组件，

地下室使用一个名为 mba 的单独组件，

它来自调制解调器基本

身份验证器，

整个事情是由

android 内核名称的子系统运行的，将

外围图像剥离更大你 可以打开

源代码

并研究它的外观，



mba 的目的是验证现代

固件，

这样您就无法将

一些任意逗号注入现代

固件并刷新它，

这是强化的另一面，所以

这使得

向地下室注入任何任意代码变得非常困难，

基本上唯一的方法是

通过

这个项目期间的软件漏洞，我



从我的 Nexus 6p 实现中对六边形磁性固件进行了部分逆向工程，





逆向工程的过程是

不是很困难

首先，您需要

从谷

歌网站下载固件，在这种情况下，

然后您需要找到与

调制解调器固件相对应的二进制文件，

该二进制文件实际上是一个复合二进制

文件，

该二进制文件对应于必须

分为 代表





固件内部特定部分的单独二进制文件，为此目的，

我们可以在将

底层

固件分成单独的部分后使用 unifi trustlet 脚本，您可以将

它们加载到任一 pro 中，

有几个可用于

eda pro 的插件，支持 hexagon

我尝试过其中之一，我认为它是

gsmk

，它对于基本曲线工程目的非常有效，



特别是

现代固件的某些部分

在运行时被压缩和重新定位，因此

您将无法对

它们进行逆向工程，除非您可以

解压缩它们，

这也是一个挑战，

因为高通使用一些内部

压缩

算法进行

逆向工程

呃，这里的主要方法是

从一些根点开始，

例如，因为这是

我们知道的实时操作系统 它

应该有一些

我们可以找到的任务结构和测试结构，并且

从那里我们可以

找到一些有趣的代码（如果是

六边形），这有点不简单，

因为

正如我所说，它没有任何日志

字符串，所以即使

您 可能会找到看起来像

灰尘支柱的东西，但

不清楚它

实际上代表哪个代码，所以

这里的第一步是应用



通过 q-shrink 从二进制文件中删除的日志字符串，

我认为唯一的方法是 通过

使用



泄露源中的 mst underscore txt 文件，该

文件不应

在移动设备上或

某些开放

生态系统中可用，并且在

应用此日志字符串后，您将创建

您将能够重命名一些

函数

并基于 在这些日志字符串上，并且

因为日志字符串

通常包含构建代码的源

文件

源模块的名称，



所以它创造了

机会了解

该代码到底在做什么，



在我的情况下调试并不是完全不可用，

我意识到 这将需要

几个月的工作

才能使其工作，

我认为唯一的方法也是最好的

方法是创建一个基于软件的

调试器，

类似于 modkit，

我

将在基于参考文献中引用该出版物



调制解调器本身

或某些真实身份验证器

或信任区域中的软件漏洞，以便我们可以将

软件调试器回调弹出到

地下室

并将其连接到 gdp 停止，

这就是

具有日志的固件部分的样子

这里删除了字符串，

它已经

使用任一脚本应用了一些名称，

所以当然最初没有这样的名称，

只有

每个会话的哈希值代表一个日志

字符串，

您可以从

消息哈希文件中获取该日志字符串

，这就是您的内容 在

应用

文本消息并重

命名一些函数后可以得到，在这种情况下，

您将能够找到与 diax up 系统

直接相关的数百个程序，



并且以类似的方式，您可以找到与



over-the 相关的各种子系统 -空气矢量也是如此，

但不幸的是，大多数汽车

OTA企业都位于



固件中不能立即使用的部分，

这些部分被压缩和

重新定位，

同时我在这个项目期间尝试了许多不同的

东西，



肯定有效的东西

正在构建 msm 内核

没有什么特别之处，只是

一个常规的交叉构建，

另一种常见的众所周知的

攻击方法是固件

降级，当您

使用一些包含

众所周知的安全漏洞的旧固件

并将其刷新并使用该错误来创建

漏洞时，固件降级

实现一些额外的功能或

对系统的内省这部分

肯定有效

降级对于

整个

固件和调制解调器以及

绘图区域来说都是微不足道的

我确实尝试

从

我分配几天的主要源代码构建高通固件 这项任务

因为它不是关键任务，

而且我已经用完了时间，可能

是不同版本的源代码，

但实际上这不是一个关键

项目，

因为构建泄漏的固件与



在生产形式中找到新盒子没有直接关系，



所以我 把它放在一边以供以后的

调查

我至少在软件方面也调查了一点内存转储

生态系统，

它似乎

也非常可靠地融合了

[鼓掌]

这是当我



在最初的识别期间想起高通诊断时 我偶然

发现了一些

提到高通诊断协议的白皮书和幻灯片



，它似乎是一个非常强大的

协议，特别是在

重新配置基带方面，

所以我决定首先测试它，

以防它实际上提供

一些高级自省

功能

然后可能使用它来使用



启用日志转储的协议

qualcomm diag 或 qcdm

是由 qualcomm 开发的专有协议，

用于

高级基带软件配置

和诊断

它主要针对 om 开发人员而

不是用户

qualcomm direct 协议包括

大约 200 个

公共资源，至少在理论上，

呃，其中一些在纸面上非常强大，

例如

下载器模式和读写内存，

最初，diag

在 2010 年左右进行了部分逆向工程，



并包含在

名为调制解调器管理器的开源项目中，然后

它也被 在 guillain-barre 举办的 2011 年通信大会上的牛通信进展的演讲中暴露了







这个呃我认为这个演讲

普及了它，

这就是向我介绍

这个协议的那个演讲

不幸的是这个演讲



与

现代生产并不真正相关 手机，但它确实

提供了一个高层次的概述

和一般期望，



从进攻的角度来看，您将必须处理什么，

直接协议

代表从

应用程序处理器到地下室的本地攻击向量，



它如何有用的常见场景

是

解锁 锁定

到特定移动业务的手机

如果我们

在直接协议中发现内存损坏漏洞，

则可以

直接在

基带上执行代码并更改一些材料

设置，这通常是

通过 80 个通用

处理程序完成的，但

内部 专有协议也

非常方便，因为

第二种情况下，诊断攻击的有用之处



是使用它来

弹出基于软件的调试器，

如果您可以在对话中找到一个启用



地下室读写功能的错误，

您可以弹出一些调试挂钩

并最终连接到

gdp stop，

这样

即使 gtac 不可用，它也可以创建基于软件的调试器















基于arm和rex操作系统的高通基带

所有现代高通

地下室都是基于hexagon

而不是arm，并且rex操作系统

被替换为curt，

我认为它仍然有一些

破烂，但总的来说它是一个不同的

操作系统

大多数 Diax 的超级强大注释（

例如下载器模式

和内存读写）

至少在我的设备上被删除，而且它也不会



公开任何立即可用的

接口（

例如 USB 通道）我听说可以





通过添加一些特殊的功能来启用 USB 直接通道

启动属性，

但通常不是它不可

用，不应期望

在所有设备上都可用，

因此这些观察结果基于我的

测试设备 Nexus 6p

，这应该是

中等级别的强化

更现代的设备，例如 谷歌

像素，

现代的应该

比谷歌像素更坚固，

特别是在谷歌方面，因为

他们非常认真地对待强化，

而不是这张图片的另一边，



如果你想到一些

无名调制解调器棒，这些东西可以

更开放

，更容易研究

niacc 实现架构

相对简单

这个图大致基于

我在演讲开始时展示的同一个图，





左边是 android 内核，

右侧是

地下室操作系统，

该协议实际上在两侧都有效，它不仅是



可以由应用程序

处理器发送到地下室的命令，而且也是

可以由

地下室发送到应用程序处理器的消息，

因此它们的 命令并不是真正的

命令，它们更像是令牌，也

可用于对消息进行编码。

这张幻灯片上的绿色箭头

代表一个示例，这是一个





来自基带并

进入应用程序处理器的数据流调用流程的示例，

非常明显 在命令的情况下，将

存在可逆流

数据流操作系统

内部负责诊断的主要实体

底层操作系统

是直接任务

它有一个单独的任务

专门处理

与直接协议相关的各种操作以及



之间的数据交换

直接任务和其他任务是

通过

环形缓冲区完成的，因此

例如，如果某些任务需要



通过 diag 记录某些内容，

它将使用专门的登录 api，

然后将日志记录数据

放入环形缓冲区

环形缓冲区将

在定时器或来自调用者的

基于软件的中断上耗尽，



此时数据将被包装

到 dia 协议中，从那里它将

去

查看您的任务，这个串行岛

负责发送

输出

到特定接口，

这是基于底层配置上的调制解调器，



我正在处理的主接口



是共享内存，最终位于





android 内核内部的导向器驱动程序中，

因此如果从

android 内核发送注释 到地下室，这

将是

相反的流程，首先您需要

发送一些数据

来制作饮食协议数据，然后

通过实际驱动程序将其

发送到共享内存

接口，从那里它将进入

地下室的专门任务



最终以直接任务结束，

并且

可能在 Android 端的其他负责任务中结束。

diag

由

dev diag 设备表示，该设备

由 msm 内核中的

director 和 dac 前向内核驱动程序实现，



director 驱动程序的目的是

支持 dioc 接口

确实如此，代码相当复杂，

但功能非常

简单，

它包含一些基本的最少

直接注释，可以

在地下室侧配置接口



，然后能够将



通道多路复用到 USB 或内存

设备

它还包含一些

ios 详细信息，用于

可以从 android

用户界面访问的配置

，最后实际过滤了

它认为不必要的各种评论，

这有点

重要，因为当您开始

时，您将尝试进行一些测试并

发送

通过甲板接口的一些任意评论，您将



需要重建温度

驱动程序

以删除以删除此屏蔽，

否则您的命令将无法

到达核心的地下室一侧，

控制器驱动程序基于



smd 共享内存设备接口，

该接口是 特定于

高通调制解调器的核心接口，

因此这就是图表上的 diag 的位置，



director 驱动程序本身位于

应用程序

操作系统供应商特定的驱动程序中

，然后

在地下室中有一些共享内存实现来

处理此问题

和 dioc实现本身，

实际的驱动程序

在代码中相当复杂，但功能非常

简单，

它确实实现了

一些ictels，这些ictels启用了一些配置

我没有检查这个

isotels到底负责什么，因为

它公开了可供读取的开发设备



但是默认情况下，您无法

访问

基于此设备的直接通道，因为

为了访问它，

有一个直接切换登录功能，可以将



通道切换到

用于

在此屏幕上进行拨号通信的通道，有多种模式

列出，但实际上只

支持其中两个 USB 模式

和内存设备模式 USB 模式是

默认模式，

这就是为什么如果您

只是打开设备驱动程序并

尝试从中读取某些内容，它将无法

工作，

它会被束缚 到 USB 并为了

重新配置它以使用

存储设备，您需要发送一个特殊的

rctl 代码，注意

过程名称掩码请求

验证，

它对

您尝试

通过此接口发送的拨号命令采用相当严格的过滤，

因此它会过滤 基本上除了





核心的一些基本请求之外，director 驱动程序使用

共享内存设备与基带进行通信



smd 实现非常复杂，

它公开了 smd 读取 api，

实际使用该 API 来

从共享内存读取数据 内存

共享内存的一个api也对通道的

阻塞进行操作，这些通道

是通过

名为smd的api访问的，名为open an edge

所以你可以注意到这里有

一些直接可以打开的特定通道



[鼓掌]

现在让我们看一下 在 smd

实现中，这有点

重要，因为共享内存设备

代表

从调制解调器升级到

应用程序处理器的攻击面的一部分，

这是一个非常重要的攻击面，

因为如果您只是

在地下室实现代码执行，那么

它几乎毫无用处

因为它无法访问

主操作系统，为了

使其有用，

您需要将它们链接起来以创建一个

漏洞利用链，

并且基于该块的另一个漏洞利用



从

调制解调器

到应用程序处理器的权限升级，因此共享

内存设备 是针对此的攻击服务之一



共享内存设备被实现

为 um 暴露我的区域

由高通外设暴露

专门的 msn 驱动程序将映射它，

这里它是名称 snam ram 面对

共享内存区域的基础

共享内存区域 它

基于条目和通道的概念进行操作，

因此它被划分

为

远程部分，可以

通过过程 smm getentry 访问

这些部分，其中一个条目是

smam 通道 tbl，它包含



可以从那里打开的可用通道列表，我们

实际上可以 在这个最初的研究项目中，打开通道

并使用共享内存接口，





研究整个高通

生态系统并不是我的目标，

所以当我准备这次演讲时，我

注意到



源代码中一些更有趣的事情，例如

处理 um

g 标记我的区域的专用驱动程序，大概是

由驱动程序中芯片上的某些高通系统公开的，

这主要用于只读，



我认为它不会真正



用于写入，但可能值得检查，



现在最后让我们看看 在

协议本身，

我

在研究饮食协议时注意到的第一件事是，

它实际上

在一些地方使用，不仅在 lip qcd 中，

一个名为 snobsnitch 的流行工具可以

启用协议

在 root 设备上转储太阳能协议配音，

以便 完成这个窥探的

利基通过直接接口将

他们的评论的包blob发送到移动设备



这个块是正常的没有记录

所以这让我很好奇这些

命令到底在做什么

但是在我们查看转储之前让我们

了解协议

Diet 协议由大约 200 个

公共或令牌组成，

其中一些已在开源中记录，



但不是全部，因此您可以在屏幕截图中注意到



一些注释丢失，其中

丢失的注释之一实际上是



十六进制的令牌 92

它表示编码的

哈希日志消息，通用

格式非常简单，

它是基本原语，

这里是直接令牌编号 7e

它并不是真正的分隔符，它是一个

单独的注释

126 它在开源中丢失，正如

您在这里看到的那样，

因此 dial 命令 嵌套，外层



由

七个 e 十六进制字节的包装器组成，然后是

主命令，然后

是一些可变长度

数据，可以包含

更多子命令，这整个事情

是使用 crc 验证的，

并且一些字节被专门转义为

你可以在代码片段中看到

关于二极管协议的一个有趣的事情

是

它支持子系统扩展

基本上不同的子系统在

地下室可以注册它们自己的直接

系统处理程序任意的

并且有一个特殊的注释号75

它简单地转发指示

直接系统 将此命令转发到

相应的子系统，

然后它将在那里进行解析。

存在相当多的

子系统，

并非所有子系统都被记录下来，当

我开始调查这个问题时，

我注意到实际上存在

系统

和调试子系统的诊断内容 后来的一个

立即引起了我的兴趣，因为

我希望它能够

通过这个调试子系统实现一些更高级的内省，



但事实证明调试

子系统

非常简单，它只支持一个

命令

注入崩溃

[鼓掌]

所以你可以发送一个特殊的直接命令

这会将崩溃注入地下室



我稍后会讨论这个

现在让我们看一下

dag 协议的具体示例

这是

来自 snoop snitch 的注释块的注释片段

这个博客实际上由三个

大的

逻辑部分组成 部分很大程度上

无关紧要，

它是一堆注释，请求

来自基带的各种信息，

例如时间戳版本和四个构建

ID 等等，

第二组注释

以命令号 73 十六进制开头，



这是常见的日志配置，

这是命令 启用

协议转储并配置它们，

该 blob 的第三部分

以命令号 7d 十六进制开头，

这是命令 x 消息配置，

这实际上

是应该启用文本消息

登录的命令，

除了在监听告密的情况下

它会禁用 所有日志记录都在一起

[掌声]

那么，蜂窝协议转储实际上是如何

工作的，

为了启用太阳能协议

转储，我们需要

一个直接命令锁定配置号 73

十六进制，

它部分记录在 lip qcdm 中，



数据包的结构将

包含代码

子注释将

设置掩码，在这种情况下，

它还需要一个与



我们要转储的特定协议相对应的设备 ID，

最后是用于



过滤转储某些部分的掩码，

这相对简单

，现在 第二个命令直接

命令文本消息配置

这是应该

启用

纺织消息法的命令，

该通用格式未记录，

所以让我们仔细看看它

注释

由

一个子命令组成，在本例中它是子

注释号四

设置掩码，然后有两个

16 位整数

ssid start 和 end ssid 是子系统

id，与

二氧化硫系统不同，



最后一个是掩码，因此

子系统 id 用于

根据特定子系统过滤消息，

因为 地下室有大量的

子系统

，如果所有子系统都开始记录，这将是

大量的数据，因此

提供了这种功能来过滤



您对



python 片段感兴趣的特定子系统 这里的代码

是一个示例，如何为所有子系统启用纺织

消息日志记录，



您需要将掩码设置为所有子系统，根据

我的经验，这是相当多的日志记录



[鼓掌]

现在，为了解析传入的日志

消息，有两种类型

直接令牌中，它们都

没有记录，

第一个是遗留消息号

79

十六进制，这是一个简单的基于 ASCII 的

消息，

通过 diag 接口到达，

因此您可以非常直接地解析它，



第二个是我称之为

命令日志哈希，

它是 数字 92 十六进制这是对



日志消息进行编码的令牌，该令牌

仅包含哈希值，

如果您有

消息消息

点 txt 文件，您可以将

通过此注释到达的哈希值

与提供的消息相对应 在

文本文件中，您可以在



幻灯片的下半部分获取文本日志，这两个命令都有

两个十六进制转储示例，



它们都具有相似的结构，

首先有

四个字节是必不可少的，第

一个是命令本身，

第三个字节非常有趣，

是包含的参数数量

接下来是 64 位时间戳值



接下来是 ssid 值 16 位

某些行号，

我不确定下一个参数是什么

，最后是 是纯文本的

ascii 编码日志字符串

或

日志字符串的哈希值，

并且可以选择包含

一些参数，

因此在 um 第一个旧

命令的情况下，参数将包含在

日志消息之前，

而在第二个注释的情况下，它们



至少在我的这个实现版本中包含在日志消息的 md5 哈希之后



[掌声]，

这是一个直接数据包，至少在理论上使

您

能够将崩溃注入地下室，



因为在我的情况下它不起作用

，并且 我所说的不工作是指它对

地下室没有任何作用，

通常我希望在

生产设备上它应该

只停留在基带上，你不会

得到车库垃圾场或类似的东西，

它只是被逮捕了所以我想



它仍然 应该在其他一些设备上工作，

所以值得检查一下，



您可以

通过这种方式请求几种类型的崩溃

[掌声]

为了实现这一点，我需要一个

非常简单的工具，

基本上有两个功能，首先是直接

轻松访问 diac 接口

理想地通过某种 python

shell，其次

是能够

使用

高级日志字符串读取和解析数据，为此我

编写了一个简单的框架，

我将其命名为 diag talk，

它直接基于



android 内核中的 dev diag 接口 并

使用 python 线束，

因此左侧是

一些

带有链接值的高级解析的示例，右侧

是高级消息日志的示例，



其中包括从中提取的日志字符串





锁的固件非常有趣，

正如我所期望的那样，它有很多

详细的数据，例如 GPS

坐标

和地下室连接到不同通道的各种尝试，



我认为它对于

进攻性研究目的非常有用，有时它甚至

包含

正如您在屏幕截图中看到的那样，原始指针



所以在这个项目中我的结论是，



确实我确信

这是正确的选择，并且六边形

似乎是一个相当具有挑战性的目标

，甚至可能需要

几个月的工作才能开始做 一些

严重的进攻性工作

我也开始考虑编写一个

软件调试器，

因为它似乎是

实现调试自省最可能最可靠的方法，



而且我

注意到该领域的一些黑色空间

可能需要



高通六边形的未来工作

有很多事情

可以做，

例如，您可以查看其他

高通专有诊断

协议，或者有一些诸如

qmi 之类的协议，例如，我认为它们

比饮食协议更不为人所知，



然后需要

创建

至少对于某些芯片来说，基于camel的完整系统模拟





以及编译器的一个大问题，

这是代码中任何严肃的静态分析的主要障碍，



对于进攻性研究，有

三个大方向，第一个是

启用调试，

有不同的方向 另一方面，

例如基于软件的调试

或绕过 jtag 融合的方法



接下来是对

空中

攻击向量的探索，第三个是

从地下室升级到

应用处理器，这是

三个大型

攻击性研究向量和 对于

一般的地下室来说，未来的工作也存在

一些有趣的

方向，首先是

osmo Combi，它绝对

值得稍微更新一下，

它是基带上唯一的一个

开源实现，

它已经过时了，而且有

呃，它是 基于一些

非常晦涩的硬件，

这里的另一个问题是，

不存在

任何基于软件的 cdma 实现

elisa 非常感谢您的精彩

演讲，

嗯，观众提出了一些问题，

所以基本上第一个是

破冰小游戏 你使用

手机吗？你信任它吗？

不，我真的不只用手机来

发推特，



现在还有人使用手机吗？

不知道，好吧，

另一个问题涉及其他

高通芯片，你做到了吗？ 看看



高通 Wi-Fi 芯片组，

正如我在演讲中提到的那样，我

只有一个月的时间，

这就像一个简短的确认项目，

所以我没有

时间调查所有我

注意到的

高通袜子有 Wi-Fi 芯片 它

也是基于六边形，

而且不仅如此，它还共享一些

相同的

低级技术原语，所以它



绝对值得一看，但喜欢

详细研究它，

好吧好吧，谢谢，那么这里还有

一个非常

技术性的问题，所以相反 必须对



直接卡驱动程序进行严格的命令检查，



是否有可能将映射开发内存结束

到用户空间进程并

直接发送命令，所以

这在一定程度上取决于目标

是

什么，所以这实际上取决于 根据您

之前的背景和目标，

这里的要点是，默认情况下，

director 生态系统不允许

发送任意数据命令，

因此无论哪种方式，您都必须破解

某些内容，

一种破解方法是重建

实际的驱动程序，

这样您就能够 例如，

直接通过

应用程序界面发送命令的另一种方法是

直接访问共享内存，



但我认为这会更复杂，

因为高通共享内存

实现非常复杂，所以

我认为最简单的方法

实际上是破解 导演驱动程序

并使用开发直接接口语音

好吧，是的，谢谢，嗯，好吧，

这是有一个问题，

嗯，快速读出，也许你可以

理解它，这对于手机来说通常是很好的

安全性，

所以

我提出的这种级别的强化我

认为是

中等水平左右，所以通常量产

手机会更加坚固，

如果你看一下谷歌

Pixel 5

或最新产品，它们会

比我

讨论的更好，

哦，好吧，谢谢，

所以它不会 不管怎样，我们似乎还有其他

问题，

所以如果您想

与 alisa 联系，

没问题，

现在您的视频下方有反馈选项卡，

只需将您的问题放到那里，

这是与 elisa 联系的一种方式

城市，我想说我们今天的会议已经结束了，



非常感谢埃莉莎

再次做了这个非常好的演讲，

当然，我现在将转到

先驱新闻节目，

哇

你

